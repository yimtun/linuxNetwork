{"./":{"url":"./","title":"Introduction","keywords":"","body":"linuxNetwork console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"iptables/iptables.html":{"url":"iptables/iptables.html","title":"iptables","keywords":"","body":"centos7 表名 -t 指定表名 filter nat mangle raw 链 INPUT OUTPUT FORWARD PREROUTING POSTROUTING 查看规则 -L 可指定链 iptables -L FORWARD -n -t filter --line-number 删除规则 iptables -L -n -t filter --line-number Chain INPUT (policy ACCEPT) num target prot opt source destination 1 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:53 2 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:53 3 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:67 4 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:67 Chain FORWARD (policy ACCEPT) num target prot opt source destination 1 ACCEPT all -- 0.0.0.0/0 10.0.0.0/24 ctstate RELATED,ESTABLISHED 2 ACCEPT all -- 10.0.0.0/24 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 4 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-port-unreachable 5 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-port-unreachable 6 ACCEPT all -- 203.0.113.0/24 0.0.0.0/0 Chain OUTPUT (policy ACCEPT) num target prot opt source destination 1 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:68 iptables -t filter -D FORWARD 6 ping 不通相关查看 reject-with icmp-port-unreachable iptables -t filter -L FORWARD iptables -t filter -L FORWARD -n 设置允许icmp iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT ??? iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"iptables/add-rules.html":{"url":"iptables/add-rules.html","title":"add rules","keywords":"","body":"添加一条规则到尾部 iptables -A INPUT -t filter -s 192.168.1.5 -j DROP iptables -L INPUT -t filter Chain INPUT (policy ACCEPT) target prot opt source destination ACCEPT udp -- anywhere anywhere udp dpt:domain ACCEPT tcp -- anywhere anywhere tcp dpt:domain ACCEPT udp -- anywhere anywhere udp dpt:bootps ACCEPT tcp -- anywhere anywhere tcp dpt:bootps DROP all -- 192.168.1.5 anywhere [root@localhost ~]# iptables -L INPUT -t filter -n Chain INPUT (policy ACCEPT) target prot opt source destination ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:53 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:53 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:67 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:67 DROP all -- 192.168.1.5 0.0.0.0/0 [root@localhost ~]# iptables -L INPUT -t filter -n --line-number Chain INPUT (policy ACCEPT) num target prot opt source destination 1 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:53 2 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:53 3 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:67 4 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:67 5 DROP all -- 192.168.1.5 0.0.0.0/0 再插入一条规则为第五行，将行数直接写到规则链的后面 原来第五行至后面的规则会往下排 iptables -I INPUT 5 -t filter -s 192.168.1.6 -j DROP iptables -L INPUT -t filter -n --line-number Chain INPUT (policy ACCEPT) num target prot opt source destination 1 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:53 2 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:53 3 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:67 4 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:67 5 DROP all -- 192.168.1.6 0.0.0.0/0 6 DROP all -- 192.168.1.5 0.0.0.0/0 删除 5 6 使用编号删除 iptables -D INPUT 5 -t filter 使用语句删除 iptables -D INPUT -t filter -s 192.168.1.6 -j DROP iptables -D INPUT -t filter -s 192.168.1.5 -j DROP 修改 iptables -R INPUT 5 -j ACCEPT iptables -L INPUT -t filter -n --line-number Chain INPUT (policy ACCEPT) num target prot opt source destination 1 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:53 2 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:53 3 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:67 4 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:67 [root@localhost ~]# iptables -A INPUT -t filter -s 192.168.1.5 -j DROP [root@localhost ~]# iptables -L INPUT -t filter -n --line-number Chain INPUT (policy ACCEPT) num target prot opt source destination 1 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:53 2 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:53 3 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:67 4 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:67 5 DROP all -- 192.168.1.5 0.0.0.0/0 [root@localhost ~]# iptables -R INPUT 5 -j ACCEPT [root@localhost ~]# iptables -L INPUT -t filter -n --line-number Chain INPUT (policy ACCEPT) num target prot opt source destination 1 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:53 2 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:53 3 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:67 4 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:67 5 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 reject-with iptables -A INPUT -p tcp -m tcp --dport 5555 -j REJECT --reject-with icmp-port-unreachable iptables -L FORWARD -n -t filter --line-number Chain FORWARD (policy ACCEPT) num target prot opt source destination 1 ACCEPT all -- 0.0.0.0/0 203.0.113.0/24 ctstate RELATED,ESTABLISHED 2 ACCEPT all -- 203.0.113.0/24 0.0.0.0/0 3 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 4 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-port-unreachable 5 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-port-unreachable 6 ACCEPT all -- 0.0.0.0/0 10.0.0.0/24 ctstate RELATED,ESTABLISHED 7 ACCEPT all -- 10.0.0.0/24 0.0.0.0/0 8 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 9 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-port-unreachable 10 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-port-unreachable 11 ACCEPT all -- 0.0.0.0/0 192.168.122.0/24 ctstate RELATED,ESTABLISHED 12 ACCEPT all -- 192.168.122.0/24 0.0.0.0/0 13 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 14 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-port-unreachable 15 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-port-unreachable iptables -A FORWARD -t filter -s 0.0.0.0/0 -d 0.0.0.0/0 -j REJECT --reject-with icmp-port-unreachable iptables -L FORWARD -n -t filter --line-number 删除 iptables -D FORWARD -t filter -s 0.0.0.0/0 -d 0.0.0.0/0 -j REJECT --reject-with icmp-port-unreachable console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"iptables/snat.html":{"url":"iptables/snat.html","title":"snat","keywords":"","body":"kvm 宿主机 虚拟机使用kvm 网络 br1 kvm br1 使用宿主机上的网桥设备 br1 是一个虚拟接口 没有接入任何物理网卡 虚拟机 通过 kvm 宿主机的网络br0 可以访问互联网 虚拟机的网关指定为 宿主机br1 的地址 203.0.113.100 echo 1 > /proc/sys/net/ipv4/ip_forward cat ifcfg-br1 DEVICE=br1 ONBOOT=yes BOOTPROTO=static NM_CONTROLLED=no IPADDR=203.0.113.100 NETMASK=255.255.255.0 USERCTL=no TYPE=Bridge br1 0f54af04-e735-4a75-a40e-61fb2393f6a9 cat /etc/sysconfig/network-scripts/ifcfg-br0 DEVICE=br0 ONBOOT=yes BOOTPROTO=static NM_CONTROLLED=no IPADDR=192.168.1.100 GATEWAY=192.168.1.1 NETMASK=255.255.255.0 DNS1=223.5.5.5 USERCTL=no TYPE=Bridge cat /etc/libvirt/qemu/networks/br0.xml br0 25890db9-4091-4d23-9f39-1ab8536271cf vm eth1 bridge br1 ip 203.0.113.1 ip route add default via 203.0.113.100 dev eth1 ip route show default via 203.0.113.100 dev eth1 169.254.0.0/16 dev eth1 scope link metric 1003 203.0.113.0/24 dev eth1 proto kernel scope link src 203.0.113.1 1 filter 表 FORWARD 链允许203.0.113.0/24 通过 iptables -A FORWARD -t filter -s 203.0.113.0/24 -j ACCEPT 查看 iptables -L FORWARD -t filter -n 2 做地址伪装 通过br0 访问互联网 还可以使用SNAT 策略 iptables -t nat -APOSTROUTING -s 203.0.113.0/24 -o br0 -j MASQUERADE 优化 排除本网段 iptables -t nat -APOSTROUTING -s 203.0.113.0/24 ! -d 203.0.113.0/24 -o br0 -j MASQUERADE 查看 iptables -t nat -L POSTROUTING -n console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"iptables/dnat.html":{"url":"iptables/dnat.html","title":"dnat","keywords":"","body":"10.0.0.11 controller iptables -t nat -A PREROUTING -d 172.16.101.32 -p tcp --dport 80 -j DNAT --to-destination 10.0.0.11:80 iptables -t nat -A POSTROUTING -j MASQUERADE console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"iptables/delete-table.html":{"url":"iptables/delete-table.html","title":"清除表","keywords":"","body":"iptables -F -t filter iptables -L -t filter Chain INPUT (policy ACCEPT) target prot opt source destination Chain FORWARD (policy ACCEPT) target prot opt source destination Chain OUTPUT (policy ACCEPT) target prot opt source destination [root@localhost ~]# 设置链的默认规则 iptables -P FORWARD ACCEPT -t filter 清空一个表中的一个链 iptables -F FORWARD -t filter console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"ip/ip.html":{"url":"ip/ip.html","title":"ip 命令","keywords":"","body":"添加地址 ip addr add 203.0.113.1/24 dev eth0 删除地址 ip addr del 203.0.113.100/24 dev br1 设置默认网关 ip route add default via 203.0.113.2 dev eth0 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"arp/arp.html":{"url":"arp/arp.html","title":"arp 命令","keywords":"","body":"arp -a arp -n arp -d console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"brctl/brctl.html":{"url":"brctl/brctl.html","title":"brctl 命令","keywords":"","body":"brctl setageing br0 0 brctl setfd br0 0 brctl stp br0 off 创建网桥 设置地址启动网桥 brctl addbr br1 ip addr add 203.0.113.1/24 dev br1 ip link set up br1 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"kvm/kvm-nat.html":{"url":"kvm/kvm-nat.html","title":"kvm 虚拟机 不走网关到一个宿主机的地址","keywords":"","body":"kvm nat1 nat2 vm1 nat1 ping nat2 gw 不走nat1 网关直接到达 nat2的网关 也就是nat2 在宿主机上的地址 [root@controller ~]# traceroute 203.0.113.229 traceroute to 203.0.113.229 (203.0.113.229), 30 hops max, 60 byte packets 1 gateway (10.0.0.1) 0.564 ms 0.489 ms 0.446 ms 2 203.0.113.229 (203.0.113.229) 2.573 ms 2.538 ms 2.506 ms [root@controller ~]# traceroute 203.0.113.1 kvm 虚拟机地址 traceroute to 203.0.113.1 (203.0.113.1), 30 hops max, 60 byte packets 1 gateway (10.0.0.1) 1.079 ms 1.006 ms 0.960 ms 2 203.0.113.1 (203.0.113.1) 0.930 ms 0.900 ms 0.865 ms [root@controller ~]# traceroute 203.0.113.100 100 是宿主机的地址 traceroute to 203.0.113.100 (203.0.113.100), 30 hops max, 60 byte packets 1 203.0.113.100 (203.0.113.100) 0.819 ms 0.668 ms 0.582 ms 在Linux中的虚拟机的网卡都包含前半段和后半段，前半段在虚拟机上，后半段在宿主机上。 上图eth0为虚拟机上的网卡，对应的后半段为vnet0，vnet0为tap设备。 在虚拟机上所有发往eth0的数据就直接发往vnet0了，也可以将vnet0看作一块网卡。 在宿主机中创建一个桥设备，把宿主机的eth0放在桥上，这样虚拟机上的eth0将报文发给vnet0， 再直接发给宿主机上的eth0，将源地址改为宿主机上的eth0的地址 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"kvm/kvm-interface.html":{"url":"kvm/kvm-interface.html","title":"kvm 网络重启 虚拟机接口从宿主机网桥被摘下","keywords":"","body":"[root@localhost ~]# ip a | grep vnet0 51: vnet0: mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 1000 [root@localhost ~]# ip a | grep vnet1 52: vnet1: mtu 1500 qdisc pfifo_fast master virbr-203 state UNKNOWN group default qlen 1000 [root@localhost ~]# brctl addif virbr-10 vnet0 [root@localhost ~]# ps -ef |grep qemu | grep vnet0 [root@localhost ~]# ip a | grep vnet1 52: vnet1: mtu 1500 qdisc pfifo_fast master virbr-203 state UNKNOWN group default qlen 1000 [root@localhost ~]# ip a | grep vnet0 51: vnet0: mtu 1500 qdisc pfifo_fast master virbr-10 state UNKNOWN group default qlen 1000 [root@localhost ~]# console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"router/router.html":{"url":"router/router.html","title":"router","keywords":"","body":"查看本机路由 br1 510682ab-7fd7-49f8-a21d-729cfe9b55a1 ip route show router vm eth0 br0 eth1 br1 172.16.10.1/24 eth0 default gw 172.16.11.2 internet 203.0.113.1/24 eth1 client vm eth0 br1 203.0.113.250/24 eth0 default gw 203.0.113.1 router vm echo 1 > /proc/sys/net/ipv4/ip_forward 方案1 iptables -t nat-A POSTROUTING -s 203.0.113.0/24 -j SNAT --to 172.16.10.1 方案2 iptables -t nat -APOSTROUTING -s 203.0.113.0/24 ! -d 203.0.113.0/24 -o eth0 -j MASQUERADE ??? iptables -A FORWARD -t filter -s 203.0.113.0/24 -j ACCEPT console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"icmp/icmp.html":{"url":"icmp/icmp.html","title":"icmp 重定向","keywords":"","body":"kvm 宿主机 kvm 宿主机 清除关于 203.0.113.0/24 网段的 iptables 配置 和 路由配置 iptables -L -n -t nat --line-number iptables -L -n -t filter --line-number iptables -L -n -t raw --line-number iptables -L -n -t mangle --line-number ip route show cat /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0 ONBOOT=yes BRIDGE=br0 cat /etc/sysconfig/network-scripts/ifcfg-br0 DEVICE=br0 ONBOOT=yes BOOTPROTO=static NM_CONTROLLED=no IPADDR=192.168.1.100 GATEWAY=192.168.1.1 NETMASK=255.255.255.0 DNS1=223.5.5.5 USERCTL=no TYPE=Bridge cat /etc/sysconfig/network-scripts/ifcfg-br1 DEVICE=br1 ONBOOT=yes BOOTPROTO=static NM_CONTROLLED=no USERCTL=no TYPE=Bridge kvm network virsh net-list Name State Autostart Persistent ---------------------------------------------------------- br0 active yes yes br1 active yes yes cat /etc/libvirt/qemu/networks/br0.xml br0 25890db9-4091-4d23-9f39-1ab8536271cf cat /etc/libvirt/qemu/networks/br1.xml br1 0f54af04-e735-4a75-a40e-61fb2393f6a9 vm1 use kvm br1 net 203.0.113.229 gw 203.0.113.1 vm2 router1 use kvm br1 net 203.0.113.1 gw 203.0.113.2 ip addr add 203.0.113.1/24 dev eth0 ip route add default via 203.0.113.2 dev eth0 echo 1 > /proc/sys/net/ipv4/ip_forward vm3 use eth0 use kvm br0 net eth1 use kvm br1 net eth0 192.168.1.101/24 gw 192.168.1.1 eth1 203.0.113.2/24 no gw ip addr add 203.0.113.2/24 dev eth1 echo 1 > /proc/sys/net/ipv4/ip_forward iptables -t nat-A POSTROUTING -s 203.0.113.0/24 -j SNAT --to 192.168.1.101 指向网关 203.0.113.1 的设备 会报错 [root@controller ~]# ip netns exec qrouter-6c2e391b-22f1-4692-a4d7-bfd24599c600 ping 114.114.114.114 PING 114.114.114.114 (114.114.114.114) 56(84) bytes of data. 64 bytes from 114.114.114.114: icmp_seq=1 ttl=71 time=26.3 ms From 203.0.113.1 icmp_seq=2 Redirect Host(New nexthop: 203.0.113.2) From 203.0.113.1: icmp_seq=2 Redirect Host(New nexthop: 203.0.113.2) 64 bytes from 114.114.114.114: icmp_seq=2 ttl=78 time=25.9 ms From 203.0.113.1: icmp_seq=3 Redirect Host(New nexthop: 203.0.113.2) From 203.0.113.1 icmp_seq=3 Redirect Host(New nexthop: 203.0.113.2) 64 bytes from 114.114.114.114: icmp_seq=3 ttl=89 time=25.9 ms From 203.0.113.1 icmp_seq=4 Redirect Host(New nexthop: 203.0.113.2) From 203.0.113.1: icmp_seq=4 Redirect Host(New nexthop: 203.0.113.2) 64 bytes from 114.114.114.114: icmp_seq=4 ttl=70 time=25.9 ms From 203.0.113.1 icmp_seq=5 Redirect Host(New nexthop: 203.0.113.2) From 203.0.113.1: icmp_seq=5 Redirect Host(New nexthop: 203.0.113.2) 64 bytes from 114.114.114.114: icmp_seq=5 ttl=63 time=26.1 ms 故障复现 删除apr 记录 重新学习 vm1 ip netns exec qrouter-6c2e391b-22f1-4692-a4d7-bfd24599c600 arp -d 203.0.113.1 ip netns exec qrouter-6c2e391b-22f1-4692-a4d7-bfd24599c600 arp -d 203.0.113.2 ip netns exec qrouter-6c2e391b-22f1-4692-a4d7-bfd24599c600 arp -n [root@controller ~]# 空 vm2 arp -d 203.0.113.2 icmp重定向 ICMP重定向报文是ICMP控制报文中的一种。在特定的情况下，当路由器检测到一台机器使用非优化路由的时候， 它会向该主机发送一个ICMP重定向报文，请求主机改变路由。路由器也会把初始数据包向它的目的地转发。 发生ICMP重定向通常有两种情况： 1)当路由器从某个接口收到数据还需要从相同接口转发该数据时； 2)当路由器从某个接口到发往远程网络的数据时发现源ip地址与下一跳属于同一网段时。 ICMP 重定向消息：如果路由器发现发送端主机使用次优的路径发送数据时，那么它会返回一个 ICMP 重定向消息给这个主机， 这个消息包含了最合适的路由信息和源数据。主要发生在路由器持有更好的路由信息的情况下， 路由器会通过这个 ICMP 重定向消息给发送端主机一个更合适的发送路由。 console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"dummy/dummy.html":{"url":"dummy/dummy.html","title":"dummy","keywords":"","body":" https://docs.openstack.org/operations-guide/ops-network-troubleshooting.html Create and bring up a dummy interface, snooper0: ip link add name snooper0 type dummy ip link set dev snooper0 up Add device snooper0 to bridge br-int: ovs-vsctl add-port br-int snooper0 https://blog.csdn.net/xiaoyulovly/article/details/93203634 1、创建dummy接口 ip link add dummy1 type dummy ip link set dummy1 arp on ip address add 10.0.2.2/24 broadcast + dev dummy1 ip link set dummy1 up 2、创建桥接接口 ip link add dummy1 type dummy ip link add dummy2 type dummy ip link add dummy-br0 type bridge ip link set dummy1 arp on ip link set dummy2 arp on ip link set dev dummy1 master dummy-br0 ip link set dev dummy2 master dummy-br0 ip address add 10.0.2.1/24 broadcast + dev dummy-br0 ip address add 10.0.2.2/24 broadcast + dev dummy1 ip address add 10.0.2.3/24 broadcast + dev dummy2 ip link set dummy1 up ip link set dummy2 up ip link set dummy-br0 up console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"basic/basic.html":{"url":"basic/basic.html","title":"basic","keywords":"","body":"常用的掩码是24位的 0-255 0 是网络号 255 是广播地址 如果掩码是26位的，分为4个段，1-62/65-126/129-190/193-254 0-63 0 网络号 63 广播地址 可用地址 1-62 64-127 64 网络号 127 广播地址 可用地址 65-126 128-191 128 网络号 191 广播地址 可用地址 129-190 192-255 192 网络号 155 广播地址 可用地址 193-254 10.20.1.0/26 指的就是0-63 自动计算网络号 255.255.255.192 openstack subnet create --network provider --subnet-range 10.20.1.64/26 --allocation-pool start=10.20.1.70,end=10.20.1.120 --dns-nameserver 114.114.114.114 --gateway 10.20.1.65 provider eth1 DEVICE=eth1 ONBOOT=yes TYPE=Ethernet BOOTPROTO=none console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"},"ssh/ssh.html":{"url":"ssh/ssh.html","title":"ssh 隧道","keywords":"","body":" http://www.zsythink.net/archives/2450 ssh 隧道 1 加密数据 2 绕过防火墙等限制 本地转发 A 10.1.0.1B 10.1.0.2 mysql server 3306 port A 上执行 ssh -L 9906:10.1.0.1:3306 root@10.1.0.2 -f 后台运行 ssh 隧道 -N 创建隧道时 并不会打开远程shell 连接到目标主机 ssh -f -N -L 9906:10.1.0.1:3306 root@10.1.0.2 指定本地监听地址 ssh -f -N -L 10.1.0.1:9906:10.1.0.1:3306 root@10.1.0.2 -g 网关模式监听本地所有地址 ssh -g -f -N -L 9906:10.1.0.1:3306 root@10.1.0.2 远程转发 -R https://blog.51cto.com/ilanni/1696162 https://www.cnblogs.com/williamjie/p/9684684.html console.log(\"plugin-popup....\");document.onclick = function(e){ e.target.tagName === \"IMG\" && window.open(e.target.src,e.target.src)}img{cursor:pointer}"}}